{"version":3,"sources":["components/DataPicker.tsx","components/Button.tsx","components/Input.tsx","common/helpers.ts","components/TableRow.tsx","components/Table.tsx","pages/StepsRecorderPage.tsx","App.js","index.js"],"names":["DataPicker","onInput","date","className","required","type","onChange","value","Btn","styled","button","Button","onSubmit","onClick","Input","steps","min","placeholder","formatDate","split","reverse","join","TableRow","onDelete","id","setTableData","data","useState","edit","setEdit","editSteps","setEditSteps","editDate","setEditDate","handleEdit","style","width","currentTarget","editedData","map","item","handleEditSubmit","TableStyles","div","RowStyles","Table","sortedData","sort","a","b","Date","getTime","dataToRender","length","Container","FormWrapper","form","StepsRecorderPage","setDate","setSteps","tableData","handleSubmit","find","hasDate","newData","reduce","acc","curr","nanoid","htmlFor","parseInt","filter","entry","App","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b188820a.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\ntype DateProps = {\n  onInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  date: string;\n};\n\nconst DataPicker: FC<DateProps> = ({ onInput, date }) => (\n  <input\n    className=\"input\"\n    required\n    type=\"date\"\n    onChange={onInput}\n    value={date}\n  />\n);\nexport default DataPicker;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\ntype ButtonProps = {\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement> ) => void;\n  value: string;\n};\n\nconst Btn = styled.button`\n  width: 80px;\n  height: 40px;\n  box-sizing: border-box;\n  border-radius: 4px;\n  outline: 0;\n  border: 1px solid #222;\n  background: none;\n  cursor: pointer;\n\n  &:hover {\n    transition: 0.3s ease-in;\n    background: #585858;\n    color: #fff;\n    border: none;\n  }\n`;\n\nconst Button: FC<ButtonProps> = ({ onSubmit, value }) => {\n  return <Btn type='button' onClick={onSubmit}>{value}</Btn>;\n};\n\nexport default Button;\n","import React, { FC } from \"react\";\n\ntype InputProps = {\n  steps: number;\n  onInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst Input: FC<InputProps> = ({ steps, onInput }) => (\n  <input\n    value={steps}\n    min=\"0\"\n    required\n    onChange={onInput}\n    className=\"input\"\n    type=\"number\"\n    placeholder=\"Enter a number\"\n  />\n);\n\nexport default Input;\n","export const formatDate = (date: string) => date.split(\"-\").reverse().join(\"-\");\n","import React, { FC, useState } from \"react\";\nimport { formatDate } from \"../common/helpers\";\nimport { TableData } from \"../types\";\n\ntype TableRowProps = {\n  date: string;\n  steps: number;\n  onDelete: (id: string) => void;\n  id: string;\n  setTableData: (data: TableData[]) => void;\n  data: TableData[];\n};\n\nconst TableRow: FC<TableRowProps> = ({\n  date,\n  steps,\n  onDelete,\n  id,\n  setTableData,\n  data,\n}) => {\n  const [edit, setEdit] = useState(false);\n  const [editSteps, setEditSteps] = useState(steps);\n  const [editDate, setEditDate] = useState(formatDate(date));\n\n  const handleEditChange = ({\n    currentTarget: { value },\n  }: React.FormEvent<HTMLInputElement>): void => {\n    // @ts-ignore\n    setEditSteps(value);\n  };\n\n  const handleDateChange = ({\n    currentTarget: { value },\n  }: React.FormEvent<HTMLInputElement>): void => {\n    setEditDate(value);\n  };\n\n  const handleEdit = () => setEdit(!edit);\n\n  const handleEditSubmit = (id: string) => {\n    const editedData = data.map((item) => {\n      if (item.id === id) {\n        return {\n          id,\n          date: editDate,\n          steps: editSteps,\n        };\n      }\n      return item;\n    });\n    setTableData(editedData);\n    handleEdit();\n  };\n\n  return (\n    <>\n      {!edit ? (\n        <>\n          <div className=\"date\">{date}</div>\n          <div className=\"steps\">{steps}</div>\n          <div onClick={handleEdit} className=\"edit\">\n            <i className=\"fas fa-user-edit\" />\n          </div>\n          <div onClick={() => onDelete(id)} className=\"remove-btn\">\n            <i className=\"fas fa-times\" />\n          </div>\n        </>\n      ) : (\n        <>\n          <input\n            style={{ width: \"125px\" }}\n            type=\"date\"\n            value={editDate}\n            onChange={handleDateChange}\n          />\n          <input\n            style={{ width: \"60px\" }}\n            type=\"text\"\n            value={editSteps}\n            onChange={handleEditChange}\n          />\n          <button onClick={() => handleEditSubmit(id)}>save</button>\n          <button onClick={handleEdit}>cancel</button>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default TableRow;\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\nimport TableRow from \"./TableRow\";\nimport { formatDate } from \"../common/helpers\";\nimport { TableData } from \"../types\";\n\nconst TableStyles = styled.div`\n  max-width: 400px;\n  margin: 20px auto;\n  border: 1px solid #222;\n  border-radius: 10px;\n\n  h2 {\n    text-align: center;\n    font-size: 1rem;\n    font-weight: 300;\n  }\n`;\n\nconst RowStyles = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 10px;\n\n  .date {\n    width: 30%;\n  }\n\n  .steps {\n    width: 30%;\n  }\n\n  .edit,\n  .remove-btn {\n    width: 10%;\n  }\n`;\n\ntype TableProps = {\n  date: string;\n  steps: number;\n  data: TableData[];\n  onDelete: (id: string) => void;\n  setTableData: (data: TableData[]) => void;\n};\n\nconst Table: FC<TableProps> = ({\n  date,\n  data,\n  onDelete,\n  setTableData,\n}) => {\n  const sortedData = data.sort(\n    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()\n  );\n\n  const dataToRender = sortedData.length ? (\n    sortedData.map(({ id, date, steps }) => {\n      return (\n        <RowStyles key={id}>\n          <TableRow\n            id={id}\n            date={formatDate(date)}\n            steps={steps}\n            onDelete={onDelete}\n            setTableData={setTableData}\n            data={data}\n          />\n        </RowStyles>\n      );\n    })\n  ) : (\n    <h2>No data to display</h2>\n  );\n\n  return <TableStyles>{dataToRender}</TableStyles>;\n};\n\nexport default Table;\n","import React, { FC, useState } from \"react\";\nimport DataPicker from \"components/DataPicker\";\nimport Button from \"components/Button\";\nimport Input from \"components/Input\";\nimport Table from \"components/Table\";\nimport styled from \"styled-components\";\nimport { TableData } from \"../types\";\nimport { nanoid } from \"nanoid\";\n\nconst Container = styled.div`\n  font-family: \"Roboto\", sans-serif;\n  max-width: 600px;\n  margin: 50px auto;\n  padding-left: 15px;\n  padding-right: 15px;\n`;\n\nconst FormWrapper = styled.form`\n  max-width: 400px;\n  display: flex;\n  justify-content: space-around;\n  margin: auto;\n`;\n\nconst StepsRecorderPage: FC = () => {\n  const [date, setDate] = useState<string>(\"\");\n  const [steps, setSteps] = useState<number>(0);\n  const [tableData, setTableData] = useState<TableData[]>([\n    {\n      id: '0',\n      date: \"2019-08-20\",\n      steps: 14,\n    },\n    {\n      id: '1',\n      date: \"2020-07-19\",\n      steps: 9,\n    },\n    {\n      id: '2',\n      date: \"2006-06-18\",\n      steps: 8,\n    },\n  ]);\n  const handleTableData = (newData: TableData[]) => {\n     setTableData(newData);\n  }\n\n  const hasDate = (data: TableData[], date: string) =>\n    data.find((item: TableData) => item.date === date);\n\n  const handleSubmit = () => {\n    setDate(\"\");\n    setSteps(0);\n    if (!date || !steps) {\n      return;\n    }\n    if (hasDate(tableData, date)) {\n      const newData = tableData.reduce<TableData[]>((acc , curr ) => {\n        if (curr.date === date) {\n          return [\n            ...acc,\n            {\n              ...curr,\n              steps: curr.steps + steps,\n            },\n          ];\n        }\n        return [...acc, curr];\n      }, []);\n      return setTableData(newData);\n    }\n    return setTableData([\n      ...tableData,\n      {\n        id: nanoid(),\n        date,\n        steps,\n      },\n    ]);\n  };\n\n  const handleDelete = (id: string): void => {\n    const newData = tableData.filter((entry) => entry.id !== id);\n    setTableData(newData);\n  };\n\n  const handleDateInput = ({\n    currentTarget: { value },\n  }: React.FormEvent<HTMLInputElement>): void => {\n    setDate(value);\n  };\n\n  const handleStepsInput = ({\n    currentTarget: { value },\n  }: React.FormEvent<HTMLInputElement>): void => {\n    setSteps(parseInt(value));\n  };\n\n\n  return (\n    <Container>\n      <FormWrapper onSubmit={handleSubmit}>\n        <label htmlFor=\"date\">\n          <DataPicker date={date} onInput={handleDateInput} />\n        </label>\n        <label htmlFor=\"hours\">\n          <Input steps={steps} onInput={handleStepsInput} />\n        </label>\n        <Button value={\"ADD\"} onSubmit={handleSubmit} />\n      </FormWrapper>\n      <Table\n        date={date}\n        steps={steps}\n        data={tableData}\n        onDelete={handleDelete}\n        setTableData={handleTableData}\n      />\n    </Container>\n  );\n};\n\nexport default StepsRecorderPage;\n","import \"./App.css\";\r\nimport React from \"react\";\r\nimport StepsRecorderPage from \"./pages/StepsRecorderPage\";\r\n\r\nconst App = () => <StepsRecorderPage />;\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport App from \"./App\";\r\nimport { render } from \"react-dom\";\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}